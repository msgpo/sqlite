# 2018 February 15
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#
#***********************************************************************
# This file implements regression tests for SQLite library. The focus
# of this file are the sqlite3_wal_replication_xxx() APIs.
#

set testdir [file dirname $argv0]
source $testdir/tester.tcl
ifcapable !wal_replication {finish_test; return}
set testprefix walreplication

proc sqlite3_wal {args} {
  [lindex $args 0] eval { PRAGMA page_size = 1024 }
  [lindex $args 0] eval { PRAGMA journal_mode = wal }
}

#----------------------------------------------------------------------------
# The following block of tests - walreplication-1.* - focus on testing the
# implementation of the sqlite3_wal_replication_find(),
# sqlite3_wal_replication_register() and sqlite3_wal_replication_unregister()
# interfaces.

# Test that by default no WAL replication implementation is registered.
#
do_test 1.1 {
  sqlite3_wal_replication_find
} {}

# Test registering the stub WAL replication implementation. Since it's the first
# implementation registered, it becomes the default even if the default flag is
# off.
#
do_test 1.2.1 {
  sqlite3_wal_replication_register 0
  sqlite3_wal_replication_find
} {test}
do_test 1.2.2 {
  sqlite3_wal_replication_find test
} {test}

# Test registering again the stub WAL replication implementation.
#
do_test 1.3.1 {
  sqlite3_wal_replication_register 0
  sqlite3_wal_replication_find
} {test}
do_test 1.3.2 {
  sqlite3_wal_replication_find test
} {test}

# Test registering one more time the stub WAL replication implementation, with
# the default flag on.
#
do_test 1.4.1 {
  sqlite3_wal_replication_register 1
  sqlite3_wal_replication_find
} {test}
do_test 1.4.2 {
  sqlite3_wal_replication_find test
} {test}

# Test registering the alternate stub WAL replication implementation, with the
# default flag off.
#
do_test 1.5.1 {
  sqlite3_wal_replication_register 0 1
  sqlite3_wal_replication_find
} {test}
do_test 1.5.2 {
  sqlite3_wal_replication_find test-alt
} {test-alt}

# Test registering again the alternate stub WAL replication implementation, with
# the default flag on.
#
do_test 1.6.1 {
  sqlite3_wal_replication_register 1 1
  sqlite3_wal_replication_find
} {test-alt}
do_test 1.6.2 {
  sqlite3_wal_replication_find test-alt
} {test-alt}
do_test 1.6.3 {
  sqlite3_wal_replication_find test
} {test}

# Test unregistering the alternate stub WAL replication implementation. The
# other one becomes the new default.
#
do_test 1.7.1 {
  sqlite3_wal_replication_unregister 1
  sqlite3_wal_replication_find test-alt
} {}
do_test 1.7.2 {
  sqlite3_wal_replication_find
} {test}

# Test unregistering the stub WAL replication implementation. No registered
# implementation is left.
#
do_test 1.8.1 {
  sqlite3_wal_replication_unregister
  sqlite3_wal_replication_find test
} {}
do_test 1.8.2 {
  sqlite3_wal_replication_find
} {}

#-------------------------------------------------------------------------
# The following block of tests - walreplication-2.* - focus on testing the
# implementation of the sqlite3_wal_replication_enabled() interface.

# Test that an error is returned if the database is not in WAL mode.
#
do_test 2.1 {
  execsql { PRAGMA journal_mode = DELETE }
  list [catch {sqlite3_wal_replication_enabled db main} msg] $msg
} {1 SQLITE_ERROR}

# Test that an error is returned if the given schema name does not exist.
#
do_test 2.2 {
  list [catch {sqlite3_wal_replication_enabled db garbage} msg] $msg
} {1 SQLITE_ERROR}

# Test that by default no WAL synchronous replication is enabled.
#
do_test 2.3 {
  reset_db
  sqlite3_wal db
  sqlite3_wal_replication_enabled db main
} {false}

#-------------------------------------------------------------------------
# The following block of tests - walreplication-3.* - focus on testing the
# implementation of the sqlite3_wal_replication_leader() interface.

# Test that an error is returned if the database is not in WAL mode.
#
do_test 3.1 {
  reset_db
  execsql { PRAGMA journal_mode = DELETE }
  list [catch {sqlite3_wal_replication_leader db main} msg] $msg
} {1 SQLITE_ERROR}

# Test that an error is returned if the given schema name is invalid.
#
do_test 3.2 {
  list [catch {sqlite3_wal_replication_leader db garbage} msg] $msg
} {1 SQLITE_ERROR}

# Test that an error is returned if the given WAL replication name is not
# registered
#
do_test 3.3 {
  reset_db
  sqlite3_wal db
  list [catch {sqlite3_wal_replication_leader db main garbage} msg] $msg
} {1 SQLITE_ERROR}

# Test that leader WAL replication is enabled after a successful call.
#
do_test 3.4 {
  sqlite3_wal_replication_register 1
  sqlite3_wal_replication_leader db main
  sqlite3_wal_replication_enabled db main
} {true test}

# Test that trying to enable leader replication twice for the same
# database results in an error.
#
do_test 3.5 {
  list [catch {sqlite3_wal_replication_leader db main} msg] $msg
} {1 SQLITE_ERROR}

# Test that an error is returned if the connection is currently configured for
# follower WAL replication.
#
do_test 3.6 {
  reset_db
  sqlite3_wal db
  sqlite3_wal_replication_follower db main
  list [catch {sqlite3_wal_replication_leader db main} msg] $msg
} {1 SQLITE_ERROR}

#-------------------------------------------------------------------------
# The following block of tests - walreplication-4.* - focus on testing the
# implementation of the sqlite3_wal_replication_follower() interface.

# Test that an error is returned if the database is not in WAL mode.
#
do_test 4.1 {
  reset_db
  execsql { PRAGMA journal_mode = DELETE }
  list [catch {sqlite3_wal_replication_follower db main} msg] $msg
} {1 SQLITE_ERROR}

# Test that an error is returned if the given schema name is invalid.
#
do_test 4.2 {
  reset_db
  list [catch {sqlite3_wal_replication_follower db garbage} msg] $msg
} {1 SQLITE_ERROR}

# Test that follower WAL replication is enabled after a successful call.
#
do_test 4.3 {
  reset_db
  sqlite3_wal db
  sqlite3_wal_replication_follower db main
  sqlite3_wal_replication_enabled db main
} {true}

# Test that trying to enable follower replication twice for the same
# database results in an error.
#
do_test 4.4 {
  list [catch {sqlite3_wal_replication_follower db main} msg] $msg
} {1 SQLITE_ERROR}

# Test that an error is returned if leader WAL replication is enabled.
#
do_test 4.5 {
  reset_db
  sqlite3_wal db
  sqlite3_wal_replication_leader db main
  list [catch {sqlite3_wal_replication_follower db main} msg] $msg
} {1 SQLITE_ERROR}

#-------------------------------------------------------------------------
# The following block of tests - walreplication-5.* - focus on testing the
# implementation of the sqlite3_wal_replication_none() interface.

# Test that an error is returned if the database is not in WAL mode.
#
do_test 5.1 {
  reset_db
  execsql { PRAGMA journal_mode = DELETE }
  list [catch {sqlite3_wal_replication_none db main} msg] $msg
} {1 SQLITE_ERROR}

# Test that an error is returned if the given schema name is invalid.
#
do_test 5.2 {
  list [catch {sqlite3_wal_replication_none db garbage} msg] $msg
} {1 SQLITE_ERROR}

# Test that an error is returned if the connection hasn't been configured for
# either leader or follower WAL replication.
#
do_test 5.3 {
  reset_db
  sqlite3_wal db
  list [catch {sqlite3_wal_replication_none db main} msg] $msg
} {1 SQLITE_ERROR}

# Test that a connection can be set back to no replication after it
# was set to leader replication.
#
do_test 5.4 {
  reset_db
  sqlite3_wal db
  sqlite3_wal_replication_leader db main
  sqlite3_wal_replication_none db main
  sqlite3_wal_replication_enabled db main
} {false}

# Test that a connection can be set back to no replication after it
# was set to follower replication.
#
do_test 5.5 {
  reset_db
  sqlite3_wal db
  sqlite3_wal_replication_follower db main
  sqlite3_wal_replication_none db main
  sqlite3_wal_replication_enabled db main
} {false}

finish_test
